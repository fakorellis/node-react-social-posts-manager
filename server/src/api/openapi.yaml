openapi: 3.0.0
info:
  title: Social Posts Manager API
  description: API for managing posts, user authentication, and interactions.
  version: 1.0.0

servers:
  - url: http://localhost:4000
    description: Local server

tags:
  - name: Authentication
    description: Endpoints related to user authentication
  - name: Posts
    description: Endpoints for managing posts and user interactions
  - name: Health Check
    description: Endpoint for checking the API health status

paths:
  /api/v1/health:
    get:
      tags:
        - Health Check
      summary: Check API health status
      operationId: getStatus
      responses:
        "200":
          description: API is running and healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"

  /api/v1/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserResponse"
      responses:
        "201":
          description: User registered successfully

  /api/v1/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
      responses:
        "200":
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6..."
  /api/v1/users/me:
    get:
      tags:
        - Authentication
      summary: Get the authenticated user's profile
      operationId: getUserProfile
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: "Bearer your-jwt-token-here"
      responses:
        "200":
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized, token missing or invalid

  /api/v1/posts:
    get:
      tags:
        - Posts
      summary: Get paginated posts
      operationId: getPostsPaginated
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: "Bearer your-jwt-token-here"
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: search
          in: query
          required: false
          schema:
            type: string
            description: "Search term for filtering posts by title or body"
      responses:
        "200":
          description: Successfully retrieved paginated posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  totalPosts:
                    type: integer
                  totalPages:
                    type: integer
                  currentPage:
                    type: integer

    post:
      tags:
        - Posts
      summary: Create a new post
      operationId: createPost
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: "Bearer your-jwt-token-here"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
      responses:
        "201":
          description: Post created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Post"

  /api/v1/users/me/posts/{id}/like:
    put:
      tags:
        - Posts
      summary: Like or Unlike a post
      operationId: likePost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to like or unlike
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: "Bearer your-jwt-token-here"
      responses:
        "200":
          description: Successful operation
        "401":
          description: Unauthorized, token missing or invalid
        "404":
          description: Post not found

  /api/v1/users/me/liked-posts:
    get:
      tags:
        - Posts
      summary: Get paginated liked posts of the authenticated user
      operationId: getUserLikedPosts
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Successfully retrieved liked posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  totalItems:
                    type: integer
                  totalPages:
                    type: integer
                  currentPage:
                    type: integer
        "401":
          description: Unauthorized, token missing or invalid
    delete:
      tags:
        - Posts
      summary: Remove all liked posts of the authenticated user
      operationId: unlikeAllPosts
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: "Bearer your-jwt-token-here"
      responses:
        "204":
          description: No Content - All liked posts removed successfully
        "401":
          description: Unauthorized, token missing or invalid
components:
  schemas:
    UserResponse:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - username
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "strongpassword123"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        username:
          type: string
          example: "johndoe"

    LoginUser:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "johndoe"
        password:
          type: string
          format: password
          example: "strongpassword123"

    Post:
      type: object
      required:
        - title
        - body
      properties:
        title:
          type: string
          example: "My First Post"
        body:
          type: string
          example: "This is the content of my first post."
        createdAt:
          type: string
          format: date-time
          example: "2025-03-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-03-02T15:30:00Z"
        isLiked:
          type: boolean
          example: true
